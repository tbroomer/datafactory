{
	"name": "Cra State Merge",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CraJson",
						"type": "DatasetReference"
					},
					"name": "CRA"
				},
				{
					"dataset": {
						"referenceName": "DaprState",
						"type": "DatasetReference"
					},
					"name": "State"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DaprState",
						"type": "DatasetReference"
					},
					"name": "StateSink"
				}
			],
			"transformations": [
				{
					"name": "StateLookup"
				},
				{
					"name": "MergedColumn"
				},
				{
					"name": "Output"
				},
				{
					"name": "IdColumn"
				},
				{
					"name": "AllowUpsert"
				}
			],
			"script": "source(output(\n\t\taccountName as string,\n\t\taddress as (city as string, country as string, postalCode as string, province as string, street as string),\n\t\tbusinessNumber as string,\n\t\tcategoryCode as integer,\n\t\tcontactEmail as string,\n\t\tcontactName as string,\n\t\tcontactPhone as string,\n\t\tcontactUrl as string,\n\t\tdesignationCode as string,\n\t\tfields as ({1200} as (code as string, percentage as double), {1210} as (code as string, percentage as double), {1220} as (code as string, percentage as double), {1510} as (subordinate as boolean), {1570} as boolean, {1600} as boolean, {1800} as boolean, {2000} as boolean, {2100} as boolean, {2400} as boolean, {2550} as boolean, {2650} as boolean, {2660} as string, {2700} as boolean, {2800} as boolean, {300} as integer, {305} as integer, {310} as integer, {315} as integer, {320} as integer, {3200} as boolean, {3400} as boolean, {370} as integer, {380} as integer, {390} as integer, {3900} as boolean, {4000} as boolean, {4020} as string, {4100} as integer, {4120} as integer, {4140} as integer, {4155} as integer, {4160} as integer, {4166} as integer, {4170} as integer, {4200} as integer, {4300} as integer, {4310} as integer, {4320} as integer, {4330} as integer, {4350} as integer, {4500} as integer, {4510} as integer, {4530} as integer, {4540} as integer, {4550} as integer, {4560} as integer, {4580} as integer, {4610} as integer, {4620} as integer, {4630} as integer, {4640} as integer, {4650} as integer, {4700} as integer, {4800} as integer, {4810} as integer, {4820} as integer, {4830} as integer, {4840} as integer, {4850} as integer, {4860} as integer, {4870} as integer, {4880} as integer, {4891} as integer, {4900} as integer, {4920} as integer, {4930} as string, {4950} as integer, {5000} as integer, {5010} as integer, {5020} as integer, {5040} as integer, {5050} as integer, {5100} as integer, {5800} as boolean, {5810} as boolean, {5820} as boolean, {5830} as boolean, {5900} as integer, {5910} as integer),\n\t\tfiscalPeriodEnd as string,\n\t\tformId as integer,\n\t\tlegalName as string,\n\t\tprograms as (description as string, type as string)[],\n\t\tregistrationDate as string,\n\t\tyear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpurgeFiles: true,\n\tsingleDocument: true,\n\twildcardPaths:['**/*.json']) ~> CRA\nsource(output(\n\t\tbusinessNumber as string,\n\t\tvalue as (contactUrl as string, businessNumber as string, accountName as string, year as integer, programs as (description as string, type as string)[], contactName as string, legalName as string, fiscalPeriodEnd as string, contactEmail as string, fields as ({4330} as integer, {2400} as string, {4810} as integer, {4550} as integer, {4300} as integer, {3200} as string, {4020} as string, {4950} as integer, {5820} as string, {5010} as integer, {5100} as integer, {4640} as integer, {320} as integer, {4900} as integer, {3400} as string, {3900} as string, {390} as integer, {4200} as integer, {4800} as integer, {5810} as string, {5830} as string, {4870} as integer, {5800} as string, {2700} as string, {4860} as integer, {4500} as integer, {1570} as string, {4840} as integer, {300} as integer, {4120} as integer, {315} as integer, {4620} as integer, {4850} as integer, {2000} as string, {1200} as (code as string, percentage as integer), {4000} as string, {2800} as string, {4700} as integer, {4160} as integer, {4170} as integer, {4650} as integer, {4100} as integer, {4880} as integer, {5040} as integer, {4310} as integer, {1510} as (subordinate as string), {4350} as integer, {2100} as string, {4820} as integer, {380} as integer, {5000} as integer, {1800} as string, {1600} as string, {4155} as integer, {4920} as integer, {370} as integer, {4610} as integer, {4580} as integer), address as (city as string, country as string, postalCode as string, province as string, street as string), registrationDate as string, contactPhone as string, designationCode as string, categoryCode as string, formId as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tsystemColumns: false,\n\tthroughput: 400) ~> State\nIdColumn, State lookup(CRA@businessNumber == State@businessNumber,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'none')~> StateLookup\nStateLookup derive(mergedValue = iif(\r\n    !isNull(value),\r\n    sort(\r\n        map(\r\n            filter(value, #item.year != year),\r\n            @(\r\n                businessNumber = #item.businessNumber,\r\n                year=#item.year,\r\n                fiscalPeriodEnd=#item.fiscalPeriodEnd,\r\n                accountName=#item.accountName,\r\n                address=#item.address,\r\n                categoryCode=#item.categoryCode,\r\n                contactEmail=#item.contactEmail,\r\n                contactName=#item.contactName,\r\n                contactPhone=#item.contactPhone,\r\n                contactUrl=#item.contactUrl,\r\n                designationCode=#item.designationCode,\r\n                fields=#item.fields,\r\n                formId=#item.formId,\r\n                legalName=#item.legalName,\r\n                programs=#item.programs,\r\n                registrationDate=#item.registrationDate\r\n            )\r\n        ) + [@(\r\n                businessNumber=CRA@businessNumber,\r\n                year=year,\r\n                fiscalPeriodEnd=fiscalPeriodEnd,\r\n                accountName=accountName,\r\n                address=address,\r\n                categoryCode=categoryCode,\r\n                contactEmail=contactEmail,\r\n                contactName=contactName,\r\n                contactPhone=contactPhone,\r\n                contactUrl=contactUrl,\r\n                designationCode=designationCode,\r\n                fields=fields,\r\n                formId=formId,\r\n                legalName=legalName,\r\n                programs=programs,\r\n                registrationDate=registrationDate\r\n        )],\r\n        compare(#item1.year, #item2.year)\r\n    ),\r\n    [@(\r\n            businessNumber=CRA@businessNumber,\r\n            year=year,\r\n            fiscalPeriodEnd=fiscalPeriodEnd,\r\n            accountName=accountName,\r\n            address=address,\r\n            categoryCode=categoryCode,\r\n            contactEmail=contactEmail,\r\n            contactName=contactName,\r\n            contactPhone=contactPhone,\r\n            contactUrl=contactUrl,\r\n            designationCode=designationCode,\r\n            fields=fields,\r\n            formId=formId,\r\n            legalName=legalName,\r\n            programs=programs,\r\n            registrationDate=registrationDate\r\n    )]\r\n)) ~> MergedColumn\nMergedColumn select(mapColumn(\n\t\tid = id,\n\t\tbusinessNumber = CRA@CRA@businessNumber,\n\t\tvalue = mergedValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Output\nCRA derive(id = concat('charity||', businessNumber)) ~> IdColumn\nOutput alterRow(upsertIf(!isNull(value))) ~> AllowUpsert\nAllowUpsert sink(input(\n\t\tbusinessNumber as string,\n\t\tvalue as (businessNumber as string, year as string, fiscalPeriodEnd as string, formId as string, designationCode as string, categoryCode as string, legalName as string, accountName as string, registrationDate as string, address as (street as string, city as string, province as string, postalCode as string, country as string), contactName as string, contactPhone as string, contactEmail as string, contactUrl as string, fields as ({300} as string, {315} as string, {320} as string, {370} as string, {380} as string, {390} as string, {1200} as (code as string, percentage as string), {1510} as (subordinate as string), {1570} as string, {1600} as string, {1800} as string, {2000} as string, {2100} as string, {2400} as string, {2700} as string, {2800} as string, {3200} as string, {3400} as string, {3900} as string, {4000} as string, {4020} as string, {4100} as string, {4120} as string, {4155} as string, {4160} as string, {4170} as string, {4200} as string, {4300} as string, {4310} as string, {4330} as string, {4350} as string, {4500} as string, {4550} as string, {4580} as string, {4610} as string, {4620} as string, {4640} as string, {4650} as string, {4700} as string, {4800} as string, {4810} as string, {4820} as string, {4840} as string, {4850} as string, {4860} as string, {4870} as string, {4880} as string, {4900} as string, {4920} as string, {4950} as string, {5000} as string, {5010} as string, {5040} as string, {5100} as string, {5800} as string, {5810} as string, {5820} as string, {5830} as string), programs as (type as string, description as string)[])[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'document',\n\tpartitionKey: ['/id'],\n\tthroughput: 400,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StateSink"
		}
	}
}