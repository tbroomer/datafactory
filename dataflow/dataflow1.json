{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CraJson",
						"type": "DatasetReference"
					},
					"name": "CRA"
				},
				{
					"dataset": {
						"referenceName": "DaprState",
						"type": "DatasetReference"
					},
					"name": "State"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "StateLookup"
				},
				{
					"name": "FilteredColumn"
				}
			],
			"script": "source(output(\n\t\taccountName as string,\n\t\taddress as (city as string, country as string, postalCode as string, province as string, street as string),\n\t\tbusinessNumber as string,\n\t\tcategoryCode as short,\n\t\tcontactEmail as string,\n\t\tcontactName as string,\n\t\tcontactPhone as string,\n\t\tcontactUrl as string,\n\t\tdesignationCode as string,\n\t\tfields as ({1200} as (code as string, percentage as double), {1210} as (code as string, percentage as double), {1220} as (code as string, percentage as double), {1510} as (subordinate as boolean), {1570} as boolean, {1600} as boolean, {1800} as boolean, {2000} as boolean, {2100} as boolean, {2400} as boolean, {2550} as boolean, {2650} as boolean, {2660} as string, {2700} as boolean, {2800} as boolean, {300} as short, {305} as short, {310} as short, {315} as short, {320} as short, {3200} as boolean, {3400} as boolean, {370} as short, {380} as integer, {390} as integer, {3900} as boolean, {4000} as boolean, {4020} as string, {4100} as integer, {4120} as integer, {4140} as integer, {4155} as integer, {4160} as integer, {4166} as integer, {4170} as integer, {4200} as integer, {4300} as integer, {4310} as integer, {4320} as integer, {4330} as integer, {4350} as integer, {4500} as integer, {4510} as integer, {4530} as short, {4540} as integer, {4550} as integer, {4560} as short, {4580} as integer, {4610} as integer, {4620} as integer, {4630} as integer, {4640} as integer, {4650} as integer, {4700} as integer, {4800} as integer, {4810} as integer, {4820} as integer, {4830} as short, {4840} as integer, {4850} as integer, {4860} as integer, {4870} as integer, {4880} as integer, {4891} as integer, {4900} as integer, {4920} as integer, {4930} as string, {4950} as integer, {5000} as integer, {5010} as integer, {5020} as integer, {5040} as integer, {5050} as short, {5100} as integer, {5800} as boolean, {5810} as boolean, {5820} as boolean, {5830} as boolean, {5900} as integer, {5910} as integer),\n\t\tfiscalPeriodEnd as date,\n\t\tformId as short,\n\t\tlegalName as string,\n\t\tprograms as (description as string, type as string)[],\n\t\tregistrationDate as date,\n\t\tyear as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tsingleDocument: true,\n\twildcardPaths:['**/*.json']) ~> CRA\nsource(output(\n\t\tvalue as (fiscalPeriodEnd as string, year as integer, businessNumber as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tsystemColumns: true,\n\tthroughput: 400) ~> State\nCRA, State lookup(concat('charity||', businessNumber) == id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'none')~> StateLookup\nStateLookup derive(mergedValue = filter(value, #item.year != year),\n\t\tnewValue = @(\r\n    businessNumber,\r\n    year,\r\n    fiscalPeriodEnd\r\n)) ~> FilteredColumn"
		}
	}
}